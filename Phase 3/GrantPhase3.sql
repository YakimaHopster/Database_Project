--Admin Commission Report
CREATE OR REPLACE VIEW Admin_Commission_Report AS
SELECT x.USER_ID, u.USERNAME, u.FIRST_N, u.LAST_N, u.EMAIL, AVG(f.OVERALL_RATING) AS Seller_Rating, SUM(x.STATUS) AS Commissions
FROM GABES_USER u, GABES_ITEM x 
FULL OUTER JOIN GABES_FEEDBACK f
ON f.ITEM_ID = x.ITEM_ID
WHERE u.USER_ID = x.USER_ID
GROUP BY x.USER_ID, u.USERNAME, u.FIRST_N, u.LAST_N, u.EMAIL
ORDER BY x.USER_ID;

--Admin Commission Report Test Case
SELECT * FROM ADMIN_COMMISSION_REPORT;

--Sale Summary Report
CREATE OR REPLACE VIEW Sale_Summary_Report AS
SELECT ITEM_CATEGORY, ITEM_ID, ITEM_NAME, SELLING_PRICE, COMMISSION_FEE
FROM GABES_ITEM
WHERE STATUS = 1
GROUP BY ITEM_CATEGORY;

--Sale Summary Report Test Case
Select * FROM Sale_Summary_Report;

--Bid Status
CREATE OR REPLACE VIEW Bid_Status AS
SELECT i.ITEM_ID, i.ITEM_NAME, i.ITEM_CATEGORY, i.START_DATE, i.END_DATE, i.CURRENT_BID, x.USERNAME
FROM GABES_BIDS b, GABES_USER x, GABES_ITEM i
WHERE i.ITEM_ID = b.ITEM_ID AND b.BIDDER_ID = x.USER_ID AND i.WINNER_ID = x.USER_ID;

--Bid Status Test Case
Select * FROM Bid_Status;

--User's Rating
CREATE OR REPLACE VIEW Users_Rating AS
SELECT DISTINCT z.USERNAME, y.ITEM_ID, y.OVERALL_RATING, y.ITEM_QUALITY, y.DELIVERY, y.COMMENTS, z.User_ID
FROM  GABES_FEEDBACK y, GABES_USER z JOIN 
GABES_ITEM x
ON z.USER_ID = x.USER_ID
WHERE y.ITEM_ID = x.ITEM_ID;

--User's Rating Test Case  (pass the current users id as a parameter in phase 4 for this view)
Select USERNAME, ITEM_ID, OVERALL_RATING, ITEM_QUALITY, DELIVERY, COMMENTS 
FROM Users_Rating WHERE user_id = 4;


